// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Image.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from Image.proto</summary>
public static partial class ImageReflection {

  #region Descriptor
  /// <summary>File descriptor for Image.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ImageReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgtJbWFnZS5wcm90bxoMSGVhZGVyLnByb3RvGgtQaXhlbC5wcm90byJXCgVJ",
          "bWFnZRIXCgZoZWFkZXIYASABKAsyBy5IZWFkZXISDgoGaGVpZ2h0GAIgASgF",
          "Eg0KBXdpZHRoGAMgASgFEhYKBnBpeGVscxgEIAMoCzIGLlBpeGVsYgZwcm90",
          "bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::HeaderReflection.Descriptor, global::PixelReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Image), global::Image.Parser, new[]{ "Header", "Height", "Width", "Pixels" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Image : pb::IMessage<Image> {
  private static readonly pb::MessageParser<Image> _parser = new pb::MessageParser<Image>(() => new Image());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Image> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ImageReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Image() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Image(Image other) : this() {
    Header = other.header_ != null ? other.Header.Clone() : null;
    height_ = other.height_;
    width_ = other.width_;
    pixels_ = other.pixels_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Image Clone() {
    return new Image(this);
  }

  /// <summary>Field number for the "header" field.</summary>
  public const int HeaderFieldNumber = 1;
  private global::Header header_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Header Header {
    get { return header_; }
    set {
      header_ = value;
    }
  }

  /// <summary>Field number for the "height" field.</summary>
  public const int HeightFieldNumber = 2;
  private int height_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Height {
    get { return height_; }
    set {
      height_ = value;
    }
  }

  /// <summary>Field number for the "width" field.</summary>
  public const int WidthFieldNumber = 3;
  private int width_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Width {
    get { return width_; }
    set {
      width_ = value;
    }
  }

  /// <summary>Field number for the "pixels" field.</summary>
  public const int PixelsFieldNumber = 4;
  private static readonly pb::FieldCodec<global::Pixel> _repeated_pixels_codec
      = pb::FieldCodec.ForMessage(34, global::Pixel.Parser);
  private readonly pbc::RepeatedField<global::Pixel> pixels_ = new pbc::RepeatedField<global::Pixel>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Pixel> Pixels {
    get { return pixels_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Image);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Image other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Header, other.Header)) return false;
    if (Height != other.Height) return false;
    if (Width != other.Width) return false;
    if(!pixels_.Equals(other.pixels_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (header_ != null) hash ^= Header.GetHashCode();
    if (Height != 0) hash ^= Height.GetHashCode();
    if (Width != 0) hash ^= Width.GetHashCode();
    hash ^= pixels_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (header_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Header);
    }
    if (Height != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Height);
    }
    if (Width != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Width);
    }
    pixels_.WriteTo(output, _repeated_pixels_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (header_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
    }
    if (Height != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
    }
    if (Width != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
    }
    size += pixels_.CalculateSize(_repeated_pixels_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Image other) {
    if (other == null) {
      return;
    }
    if (other.header_ != null) {
      if (header_ == null) {
        header_ = new global::Header();
      }
      Header.MergeFrom(other.Header);
    }
    if (other.Height != 0) {
      Height = other.Height;
    }
    if (other.Width != 0) {
      Width = other.Width;
    }
    pixels_.Add(other.pixels_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (header_ == null) {
            header_ = new global::Header();
          }
          input.ReadMessage(header_);
          break;
        }
        case 16: {
          Height = input.ReadInt32();
          break;
        }
        case 24: {
          Width = input.ReadInt32();
          break;
        }
        case 34: {
          pixels_.AddEntriesFrom(input, _repeated_pixels_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
