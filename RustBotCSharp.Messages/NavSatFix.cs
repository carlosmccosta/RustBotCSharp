// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NavSatFix.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from NavSatFix.proto</summary>
public static partial class NavSatFixReflection {

  #region Descriptor
  /// <summary>File descriptor for NavSatFix.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static NavSatFixReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg9OYXZTYXRGaXgucHJvdG8aDEhlYWRlci5wcm90byJbCglOYXZTYXRGaXgS",
          "FwoGaGVhZGVyGAEgASgLMgcuSGVhZGVyEhAKCGxhdGl0dWRlGAIgASgBEhEK",
          "CWxvbmdpdHVkZRgDIAEoARIQCghhbHRpdHVkZRgEIAEoAWIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::HeaderReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::NavSatFix), global::NavSatFix.Parser, new[]{ "Header", "Latitude", "Longitude", "Altitude" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class NavSatFix : pb::IMessage<NavSatFix> {
  private static readonly pb::MessageParser<NavSatFix> _parser = new pb::MessageParser<NavSatFix>(() => new NavSatFix());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NavSatFix> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::NavSatFixReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NavSatFix() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NavSatFix(NavSatFix other) : this() {
    Header = other.header_ != null ? other.Header.Clone() : null;
    latitude_ = other.latitude_;
    longitude_ = other.longitude_;
    altitude_ = other.altitude_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NavSatFix Clone() {
    return new NavSatFix(this);
  }

  /// <summary>Field number for the "header" field.</summary>
  public const int HeaderFieldNumber = 1;
  private global::Header header_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Header Header {
    get { return header_; }
    set {
      header_ = value;
    }
  }

  /// <summary>Field number for the "latitude" field.</summary>
  public const int LatitudeFieldNumber = 2;
  private double latitude_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Latitude {
    get { return latitude_; }
    set {
      latitude_ = value;
    }
  }

  /// <summary>Field number for the "longitude" field.</summary>
  public const int LongitudeFieldNumber = 3;
  private double longitude_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Longitude {
    get { return longitude_; }
    set {
      longitude_ = value;
    }
  }

  /// <summary>Field number for the "altitude" field.</summary>
  public const int AltitudeFieldNumber = 4;
  private double altitude_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Altitude {
    get { return altitude_; }
    set {
      altitude_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NavSatFix);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NavSatFix other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Header, other.Header)) return false;
    if (Latitude != other.Latitude) return false;
    if (Longitude != other.Longitude) return false;
    if (Altitude != other.Altitude) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (header_ != null) hash ^= Header.GetHashCode();
    if (Latitude != 0D) hash ^= Latitude.GetHashCode();
    if (Longitude != 0D) hash ^= Longitude.GetHashCode();
    if (Altitude != 0D) hash ^= Altitude.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (header_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Header);
    }
    if (Latitude != 0D) {
      output.WriteRawTag(17);
      output.WriteDouble(Latitude);
    }
    if (Longitude != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(Longitude);
    }
    if (Altitude != 0D) {
      output.WriteRawTag(33);
      output.WriteDouble(Altitude);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (header_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
    }
    if (Latitude != 0D) {
      size += 1 + 8;
    }
    if (Longitude != 0D) {
      size += 1 + 8;
    }
    if (Altitude != 0D) {
      size += 1 + 8;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NavSatFix other) {
    if (other == null) {
      return;
    }
    if (other.header_ != null) {
      if (header_ == null) {
        header_ = new global::Header();
      }
      Header.MergeFrom(other.Header);
    }
    if (other.Latitude != 0D) {
      Latitude = other.Latitude;
    }
    if (other.Longitude != 0D) {
      Longitude = other.Longitude;
    }
    if (other.Altitude != 0D) {
      Altitude = other.Altitude;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (header_ == null) {
            header_ = new global::Header();
          }
          input.ReadMessage(header_);
          break;
        }
        case 17: {
          Latitude = input.ReadDouble();
          break;
        }
        case 25: {
          Longitude = input.ReadDouble();
          break;
        }
        case 33: {
          Altitude = input.ReadDouble();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
