// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pixel.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from Pixel.proto</summary>
public static partial class PixelReflection {

  #region Descriptor
  /// <summary>File descriptor for Pixel.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static PixelReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgtQaXhlbC5wcm90byIoCgVQaXhlbBIJCgFyGAEgASgNEgkKAWcYAiABKA0S",
          "CQoBYhgDIAEoDWIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Pixel), global::Pixel.Parser, new[]{ "R", "G", "B" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Pixel : pb::IMessage<Pixel> {
  private static readonly pb::MessageParser<Pixel> _parser = new pb::MessageParser<Pixel>(() => new Pixel());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Pixel> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PixelReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Pixel() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Pixel(Pixel other) : this() {
    r_ = other.r_;
    g_ = other.g_;
    b_ = other.b_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Pixel Clone() {
    return new Pixel(this);
  }

  /// <summary>Field number for the "r" field.</summary>
  public const int RFieldNumber = 1;
  private uint r_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint R {
    get { return r_; }
    set {
      r_ = value;
    }
  }

  /// <summary>Field number for the "g" field.</summary>
  public const int GFieldNumber = 2;
  private uint g_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint G {
    get { return g_; }
    set {
      g_ = value;
    }
  }

  /// <summary>Field number for the "b" field.</summary>
  public const int BFieldNumber = 3;
  private uint b_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint B {
    get { return b_; }
    set {
      b_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Pixel);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Pixel other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (R != other.R) return false;
    if (G != other.G) return false;
    if (B != other.B) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (R != 0) hash ^= R.GetHashCode();
    if (G != 0) hash ^= G.GetHashCode();
    if (B != 0) hash ^= B.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (R != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(R);
    }
    if (G != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(G);
    }
    if (B != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(B);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (R != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(R);
    }
    if (G != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(G);
    }
    if (B != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(B);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Pixel other) {
    if (other == null) {
      return;
    }
    if (other.R != 0) {
      R = other.R;
    }
    if (other.G != 0) {
      G = other.G;
    }
    if (other.B != 0) {
      B = other.B;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          R = input.ReadUInt32();
          break;
        }
        case 16: {
          G = input.ReadUInt32();
          break;
        }
        case 24: {
          B = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
