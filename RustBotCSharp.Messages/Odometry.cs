// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Odometry.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from Odometry.proto</summary>
public static partial class OdometryReflection {

  #region Descriptor
  /// <summary>File descriptor for Odometry.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static OdometryReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg5PZG9tZXRyeS5wcm90bxoMSGVhZGVyLnByb3RvGhhQb3NlV2l0aENvdmFy",
          "aWFuY2UucHJvdG8aGVR3aXN0V2l0aENvdmFyaWFuY2UucHJvdG8igwEKCE9k",
          "b21ldHJ5EhcKBmhlYWRlchgBIAEoCzIHLkhlYWRlchIWCg5jaGlsZF9mcmFt",
          "ZV9pZBgCIAEoCRIhCgRwb3NlGAMgASgLMhMuUG9zZVdpdGhDb3ZhcmlhbmNl",
          "EiMKBXR3aXN0GAQgASgLMhQuVHdpc3RXaXRoQ292YXJpYW5jZWIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::HeaderReflection.Descriptor, global::PoseWithCovarianceReflection.Descriptor, global::TwistWithCovarianceReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Odometry), global::Odometry.Parser, new[]{ "Header", "ChildFrameId", "Pose", "Twist" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Odometry : pb::IMessage<Odometry> {
  private static readonly pb::MessageParser<Odometry> _parser = new pb::MessageParser<Odometry>(() => new Odometry());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Odometry> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OdometryReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Odometry() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Odometry(Odometry other) : this() {
    Header = other.header_ != null ? other.Header.Clone() : null;
    childFrameId_ = other.childFrameId_;
    Pose = other.pose_ != null ? other.Pose.Clone() : null;
    Twist = other.twist_ != null ? other.Twist.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Odometry Clone() {
    return new Odometry(this);
  }

  /// <summary>Field number for the "header" field.</summary>
  public const int HeaderFieldNumber = 1;
  private global::Header header_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Header Header {
    get { return header_; }
    set {
      header_ = value;
    }
  }

  /// <summary>Field number for the "child_frame_id" field.</summary>
  public const int ChildFrameIdFieldNumber = 2;
  private string childFrameId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ChildFrameId {
    get { return childFrameId_; }
    set {
      childFrameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "pose" field.</summary>
  public const int PoseFieldNumber = 3;
  private global::PoseWithCovariance pose_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PoseWithCovariance Pose {
    get { return pose_; }
    set {
      pose_ = value;
    }
  }

  /// <summary>Field number for the "twist" field.</summary>
  public const int TwistFieldNumber = 4;
  private global::TwistWithCovariance twist_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TwistWithCovariance Twist {
    get { return twist_; }
    set {
      twist_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Odometry);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Odometry other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Header, other.Header)) return false;
    if (ChildFrameId != other.ChildFrameId) return false;
    if (!object.Equals(Pose, other.Pose)) return false;
    if (!object.Equals(Twist, other.Twist)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (header_ != null) hash ^= Header.GetHashCode();
    if (ChildFrameId.Length != 0) hash ^= ChildFrameId.GetHashCode();
    if (pose_ != null) hash ^= Pose.GetHashCode();
    if (twist_ != null) hash ^= Twist.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (header_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Header);
    }
    if (ChildFrameId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ChildFrameId);
    }
    if (pose_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Pose);
    }
    if (twist_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Twist);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (header_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
    }
    if (ChildFrameId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ChildFrameId);
    }
    if (pose_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pose);
    }
    if (twist_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Twist);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Odometry other) {
    if (other == null) {
      return;
    }
    if (other.header_ != null) {
      if (header_ == null) {
        header_ = new global::Header();
      }
      Header.MergeFrom(other.Header);
    }
    if (other.ChildFrameId.Length != 0) {
      ChildFrameId = other.ChildFrameId;
    }
    if (other.pose_ != null) {
      if (pose_ == null) {
        pose_ = new global::PoseWithCovariance();
      }
      Pose.MergeFrom(other.Pose);
    }
    if (other.twist_ != null) {
      if (twist_ == null) {
        twist_ = new global::TwistWithCovariance();
      }
      Twist.MergeFrom(other.Twist);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (header_ == null) {
            header_ = new global::Header();
          }
          input.ReadMessage(header_);
          break;
        }
        case 18: {
          ChildFrameId = input.ReadString();
          break;
        }
        case 26: {
          if (pose_ == null) {
            pose_ = new global::PoseWithCovariance();
          }
          input.ReadMessage(pose_);
          break;
        }
        case 34: {
          if (twist_ == null) {
            twist_ = new global::TwistWithCovariance();
          }
          input.ReadMessage(twist_);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
